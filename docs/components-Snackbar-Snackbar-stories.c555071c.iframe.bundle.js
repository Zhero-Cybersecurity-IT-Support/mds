"use strict";(self.webpackChunkmds=self.webpackChunkmds||[]).push([[6343],{"./src/components/Snackbar/Snackbar.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AutoHideDuration:()=>AutoHideDuration,Condensed:()=>Condensed,CondensedWithClose:()=>CondensedWithClose,CondensedWithLargeText:()=>CondensedWithLargeText,Default:()=>Default,Error:()=>Error,InlineMode:()=>InlineMode,LongTextTruncation:()=>LongTextTruncation,NoCloseButton:()=>NoCloseButton,Success:()=>Success,Warning:()=>Warning,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_Snackbar__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/Snackbar/Snackbar.tsx"),_utils_StoryThemeProvider__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/utils/StoryThemeProvider.tsx"),_index__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/index.ts");const __WEBPACK_DEFAULT_EXPORT__={title:"MDS/Information/Snackbar",component:_Snackbar__WEBPACK_IMPORTED_MODULE_1__.A,argTypes:{}},Template=({message,closeButton,variant,autoHideDuration,condensed,mode})=>{const[snackbarOpen,setSnackbarOpen]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_utils_StoryThemeProvider__WEBPACK_IMPORTED_MODULE_2__.A,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_index__WEBPACK_IMPORTED_MODULE_3__.kH5,null),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_index__WEBPACK_IMPORTED_MODULE_3__.$nd,{id:"activateSnackbar",onClick:()=>setSnackbarOpen(!0)},"Click to Show Snackbar"),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Snackbar__WEBPACK_IMPORTED_MODULE_1__.A,{message,closeButton,onClose:()=>{setSnackbarOpen(!1)},open:snackbarOpen,autoHideDuration,variant,condensed,mode}))},Default=Template.bind({});Default.args={message:"This is a notice message",closeButton:!0};const Success=Template.bind({});Success.args={message:"This is a success message",closeButton:!0,autoHideDuration:0,variant:"success"};const Warning=Template.bind({});Warning.args={message:"This is a warning message",closeButton:!0,autoHideDuration:0,variant:"warning"};const Error=Template.bind({});Error.args={message:"This is an error message",closeButton:!0,autoHideDuration:0,variant:"error"};const NoCloseButton=Template.bind({});NoCloseButton.args={message:"This is an error message",closeButton:!1,variant:"error"};const LongTextTruncation=Template.bind({});LongTextTruncation.args={message:"Super long text message to test truncate functionality in this snackbar Super long text message to test truncate functionality in this snackbar Super long text message to test truncate functionality in this snackbar Super long text message to test truncate functionality in this snackbar ",closeButton:!0,autoHideDuration:0};const AutoHideDuration=Template.bind({});AutoHideDuration.args={message:"Super long text message to test truncate functionality in this snackbar Super long text message to test truncate functionality in this snackbar Super long text message to test truncate functionality in this snackbar Super long text message to test truncate functionality in this snackbar ",closeButton:!0,autoHideDuration:2};const Condensed=Template.bind({});Condensed.args={message:"Small Notification",closeButton:!1,autoHideDuration:0,condensed:!0};const CondensedWithClose=Template.bind({});CondensedWithClose.args={message:"Small Notification",closeButton:!0,autoHideDuration:10,condensed:!0};const CondensedWithLargeText=Template.bind({});CondensedWithLargeText.args={message:"Super long text message to test truncate functionality in this snackbar Super long text message to test truncate functionality in this snackbar Super long text message to test truncate functionality in this snackbar Super long text message to test truncate functionality in this snackbar ",closeButton:!0,autoHideDuration:0,condensed:!0};const InlineMode=Template.bind({});InlineMode.args={message:"Super long text message to test truncate functionality in this snackbar Super long text message to test truncate functionality in this snackbar Super long text message to test truncate functionality in this snackbar Super long text message to test truncate functionality in this snackbar ",closeButton:!0,autoHideDuration:0,condensed:!0,mode:"inline"};const __namedExportsOrder=["Default","Success","Warning","Error","NoCloseButton","LongTextTruncation","AutoHideDuration","Condensed","CondensedWithClose","CondensedWithLargeText","InlineMode"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'({\n  message,\n  closeButton,\n  variant,\n  autoHideDuration,\n  condensed,\n  mode\n}) => {\n  const [snackbarOpen, setSnackbarOpen] = useState<boolean>(false);\n  return <StoryThemeProvider>\r\n      <GlobalStyles />\r\n      <Button id={"activateSnackbar"} onClick={() => setSnackbarOpen(true)}>\r\n        Click to Show Snackbar\r\n      </Button>\r\n      <Snackbar message={message} closeButton={closeButton} onClose={() => {\n      setSnackbarOpen(false);\n    }} open={snackbarOpen} autoHideDuration={autoHideDuration} variant={variant} condensed={condensed} mode={mode} />\r\n    </StoryThemeProvider>;\n}',...Default.parameters?.docs?.source}}},Success.parameters={...Success.parameters,docs:{...Success.parameters?.docs,source:{originalSource:'({\n  message,\n  closeButton,\n  variant,\n  autoHideDuration,\n  condensed,\n  mode\n}) => {\n  const [snackbarOpen, setSnackbarOpen] = useState<boolean>(false);\n  return <StoryThemeProvider>\r\n      <GlobalStyles />\r\n      <Button id={"activateSnackbar"} onClick={() => setSnackbarOpen(true)}>\r\n        Click to Show Snackbar\r\n      </Button>\r\n      <Snackbar message={message} closeButton={closeButton} onClose={() => {\n      setSnackbarOpen(false);\n    }} open={snackbarOpen} autoHideDuration={autoHideDuration} variant={variant} condensed={condensed} mode={mode} />\r\n    </StoryThemeProvider>;\n}',...Success.parameters?.docs?.source}}},Warning.parameters={...Warning.parameters,docs:{...Warning.parameters?.docs,source:{originalSource:'({\n  message,\n  closeButton,\n  variant,\n  autoHideDuration,\n  condensed,\n  mode\n}) => {\n  const [snackbarOpen, setSnackbarOpen] = useState<boolean>(false);\n  return <StoryThemeProvider>\r\n      <GlobalStyles />\r\n      <Button id={"activateSnackbar"} onClick={() => setSnackbarOpen(true)}>\r\n        Click to Show Snackbar\r\n      </Button>\r\n      <Snackbar message={message} closeButton={closeButton} onClose={() => {\n      setSnackbarOpen(false);\n    }} open={snackbarOpen} autoHideDuration={autoHideDuration} variant={variant} condensed={condensed} mode={mode} />\r\n    </StoryThemeProvider>;\n}',...Warning.parameters?.docs?.source}}},Error.parameters={...Error.parameters,docs:{...Error.parameters?.docs,source:{originalSource:'({\n  message,\n  closeButton,\n  variant,\n  autoHideDuration,\n  condensed,\n  mode\n}) => {\n  const [snackbarOpen, setSnackbarOpen] = useState<boolean>(false);\n  return <StoryThemeProvider>\r\n      <GlobalStyles />\r\n      <Button id={"activateSnackbar"} onClick={() => setSnackbarOpen(true)}>\r\n        Click to Show Snackbar\r\n      </Button>\r\n      <Snackbar message={message} closeButton={closeButton} onClose={() => {\n      setSnackbarOpen(false);\n    }} open={snackbarOpen} autoHideDuration={autoHideDuration} variant={variant} condensed={condensed} mode={mode} />\r\n    </StoryThemeProvider>;\n}',...Error.parameters?.docs?.source}}},NoCloseButton.parameters={...NoCloseButton.parameters,docs:{...NoCloseButton.parameters?.docs,source:{originalSource:'({\n  message,\n  closeButton,\n  variant,\n  autoHideDuration,\n  condensed,\n  mode\n}) => {\n  const [snackbarOpen, setSnackbarOpen] = useState<boolean>(false);\n  return <StoryThemeProvider>\r\n      <GlobalStyles />\r\n      <Button id={"activateSnackbar"} onClick={() => setSnackbarOpen(true)}>\r\n        Click to Show Snackbar\r\n      </Button>\r\n      <Snackbar message={message} closeButton={closeButton} onClose={() => {\n      setSnackbarOpen(false);\n    }} open={snackbarOpen} autoHideDuration={autoHideDuration} variant={variant} condensed={condensed} mode={mode} />\r\n    </StoryThemeProvider>;\n}',...NoCloseButton.parameters?.docs?.source}}},LongTextTruncation.parameters={...LongTextTruncation.parameters,docs:{...LongTextTruncation.parameters?.docs,source:{originalSource:'({\n  message,\n  closeButton,\n  variant,\n  autoHideDuration,\n  condensed,\n  mode\n}) => {\n  const [snackbarOpen, setSnackbarOpen] = useState<boolean>(false);\n  return <StoryThemeProvider>\r\n      <GlobalStyles />\r\n      <Button id={"activateSnackbar"} onClick={() => setSnackbarOpen(true)}>\r\n        Click to Show Snackbar\r\n      </Button>\r\n      <Snackbar message={message} closeButton={closeButton} onClose={() => {\n      setSnackbarOpen(false);\n    }} open={snackbarOpen} autoHideDuration={autoHideDuration} variant={variant} condensed={condensed} mode={mode} />\r\n    </StoryThemeProvider>;\n}',...LongTextTruncation.parameters?.docs?.source}}},AutoHideDuration.parameters={...AutoHideDuration.parameters,docs:{...AutoHideDuration.parameters?.docs,source:{originalSource:'({\n  message,\n  closeButton,\n  variant,\n  autoHideDuration,\n  condensed,\n  mode\n}) => {\n  const [snackbarOpen, setSnackbarOpen] = useState<boolean>(false);\n  return <StoryThemeProvider>\r\n      <GlobalStyles />\r\n      <Button id={"activateSnackbar"} onClick={() => setSnackbarOpen(true)}>\r\n        Click to Show Snackbar\r\n      </Button>\r\n      <Snackbar message={message} closeButton={closeButton} onClose={() => {\n      setSnackbarOpen(false);\n    }} open={snackbarOpen} autoHideDuration={autoHideDuration} variant={variant} condensed={condensed} mode={mode} />\r\n    </StoryThemeProvider>;\n}',...AutoHideDuration.parameters?.docs?.source}}},Condensed.parameters={...Condensed.parameters,docs:{...Condensed.parameters?.docs,source:{originalSource:'({\n  message,\n  closeButton,\n  variant,\n  autoHideDuration,\n  condensed,\n  mode\n}) => {\n  const [snackbarOpen, setSnackbarOpen] = useState<boolean>(false);\n  return <StoryThemeProvider>\r\n      <GlobalStyles />\r\n      <Button id={"activateSnackbar"} onClick={() => setSnackbarOpen(true)}>\r\n        Click to Show Snackbar\r\n      </Button>\r\n      <Snackbar message={message} closeButton={closeButton} onClose={() => {\n      setSnackbarOpen(false);\n    }} open={snackbarOpen} autoHideDuration={autoHideDuration} variant={variant} condensed={condensed} mode={mode} />\r\n    </StoryThemeProvider>;\n}',...Condensed.parameters?.docs?.source}}},CondensedWithClose.parameters={...CondensedWithClose.parameters,docs:{...CondensedWithClose.parameters?.docs,source:{originalSource:'({\n  message,\n  closeButton,\n  variant,\n  autoHideDuration,\n  condensed,\n  mode\n}) => {\n  const [snackbarOpen, setSnackbarOpen] = useState<boolean>(false);\n  return <StoryThemeProvider>\r\n      <GlobalStyles />\r\n      <Button id={"activateSnackbar"} onClick={() => setSnackbarOpen(true)}>\r\n        Click to Show Snackbar\r\n      </Button>\r\n      <Snackbar message={message} closeButton={closeButton} onClose={() => {\n      setSnackbarOpen(false);\n    }} open={snackbarOpen} autoHideDuration={autoHideDuration} variant={variant} condensed={condensed} mode={mode} />\r\n    </StoryThemeProvider>;\n}',...CondensedWithClose.parameters?.docs?.source}}},CondensedWithLargeText.parameters={...CondensedWithLargeText.parameters,docs:{...CondensedWithLargeText.parameters?.docs,source:{originalSource:'({\n  message,\n  closeButton,\n  variant,\n  autoHideDuration,\n  condensed,\n  mode\n}) => {\n  const [snackbarOpen, setSnackbarOpen] = useState<boolean>(false);\n  return <StoryThemeProvider>\r\n      <GlobalStyles />\r\n      <Button id={"activateSnackbar"} onClick={() => setSnackbarOpen(true)}>\r\n        Click to Show Snackbar\r\n      </Button>\r\n      <Snackbar message={message} closeButton={closeButton} onClose={() => {\n      setSnackbarOpen(false);\n    }} open={snackbarOpen} autoHideDuration={autoHideDuration} variant={variant} condensed={condensed} mode={mode} />\r\n    </StoryThemeProvider>;\n}',...CondensedWithLargeText.parameters?.docs?.source}}},InlineMode.parameters={...InlineMode.parameters,docs:{...InlineMode.parameters?.docs,source:{originalSource:'({\n  message,\n  closeButton,\n  variant,\n  autoHideDuration,\n  condensed,\n  mode\n}) => {\n  const [snackbarOpen, setSnackbarOpen] = useState<boolean>(false);\n  return <StoryThemeProvider>\r\n      <GlobalStyles />\r\n      <Button id={"activateSnackbar"} onClick={() => setSnackbarOpen(true)}>\r\n        Click to Show Snackbar\r\n      </Button>\r\n      <Snackbar message={message} closeButton={closeButton} onClose={() => {\n      setSnackbarOpen(false);\n    }} open={snackbarOpen} autoHideDuration={autoHideDuration} variant={variant} condensed={condensed} mode={mode} />\r\n    </StoryThemeProvider>;\n}',...InlineMode.parameters?.docs?.source}}}}}]);