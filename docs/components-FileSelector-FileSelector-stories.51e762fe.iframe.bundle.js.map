{"version":3,"file":"components-FileSelector-FileSelector-stories.51e762fe.iframe.bundle.js","mappings":";;;;;;;AA4CA;;;;AASA;;;AAMA;;;;;;;AClBA;;;;AASA;;;AAMA","sources":["webpack://mds/./src/components/HelpTip/HelpTip.tsx","webpack://mds/./src/components/Tooltip/Tooltip.tsx"],"sourcesContent":["// This file is part of MinIO Design System\r\n// Copyright (c) 2023 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, {\r\n  FC,\r\n  Fragment,\r\n  HTMLAttributes,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport styled, { css, keyframes } from \"styled-components\";\r\nimport { createPortal } from \"react-dom\";\r\nimport get from \"lodash/get\";\r\nimport {\r\n  CommonHelpTipPlacement,\r\n  HelpTipBuild,\r\n  HelpTipConstructProps,\r\n  HelpTipProps,\r\n} from \"./HelpTip.types\";\r\nimport Grid from \"../Grid/Grid\";\r\nimport { HelpIconFilled } from \"../Icons\";\r\n\r\nconst opacityAnimation = keyframes`\r\n  from {\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n`;\r\nconst HelptipWrapper = styled.span<HTMLAttributes<HTMLDivElement>>(\r\n  {\r\n    display: \"inline-flex\",\r\n    position: \"relative\",\r\n  },\r\n  css`\r\n    &:hover {\r\n      & .tooltipElement {\r\n        display: block;\r\n        animation: ${opacityAnimation} 1s;\r\n      }\r\n    }\r\n  `,\r\n);\r\n\r\nconst HelptipItem = styled.div<HelpTipBuild>(({ theme, placement }) => {\r\n  const tooltipArrowSize = \"6px\";\r\n\r\n  const background = get(theme, \"tooltip.background\", \"#737373\");\r\n  const textColor = get(theme, \"tooltip.color\", \"#FFFFFF\");\r\n\r\n  let placementPosition = {};\r\n  const beforePosition = {\r\n    content: \"' '\",\r\n    left: \"50%\",\r\n    border: \"solid transparent\",\r\n    height: 0,\r\n    width: 0,\r\n    position: \"absolute\",\r\n    pointerEvents: \"none\",\r\n    borderWidth: tooltipArrowSize,\r\n    marginLeft: `calc(${tooltipArrowSize} * -1);`,\r\n  };\r\n\r\n  switch (placement) {\r\n    case \"top\":\r\n      placementPosition = {\r\n        transform: \"translateX(-50%) translateY(-50%)\",\r\n        \"&::before\": {\r\n          ...beforePosition,\r\n          top: \"100%\",\r\n          borderTopColor: background,\r\n        },\r\n      };\r\n      break;\r\n    case \"right\":\r\n      placementPosition = {\r\n        transform: \"translateX(0) translateY(-50%)\",\r\n        \"&::before\": {\r\n          ...beforePosition,\r\n          left: `calc(${tooltipArrowSize} * -1)`,\r\n          top: \"50%\",\r\n          transform: \"translateX(0) translateY(-50%)\",\r\n          borderRightColor: background,\r\n        },\r\n      };\r\n      break;\r\n    case \"left\":\r\n      placementPosition = {\r\n        transform: \"translateX(-100%) translateY(-50%)\",\r\n        \"&::before\": {\r\n          ...beforePosition,\r\n          left: \"auto\",\r\n          right: `calc(${tooltipArrowSize} * -2)`,\r\n          top: \"50%\",\r\n          transform: \"translateX(0) translateY(-50%)\",\r\n          borderLeftColor: background,\r\n        },\r\n      };\r\n      break;\r\n    default:\r\n      placementPosition = {\r\n        transform: \"translateX(-50%)\",\r\n        \"&::before\": {\r\n          ...beforePosition,\r\n          bottom: \"100%\",\r\n          borderBottomColor: background,\r\n        },\r\n      };\r\n  }\r\n\r\n  return {\r\n    position: \"fixed\",\r\n    borderRadius: 4,\r\n    color: textColor,\r\n    background: background,\r\n    lineHeight: 1,\r\n    zIndex: 10001,\r\n    padding: 2,\r\n    fontSize: 12,\r\n    boxShadow: \"#00000050 0px 3px 10px\",\r\n    maxWidth: 350,\r\n    ...placementPosition,\r\n  };\r\n});\r\n\r\nconst HelpTargetItem = styled.div<HelpTipBuild>(({ theme, placement }) => {\r\n  const tooltipArrowSize = \"6px\";\r\n\r\n  const background = get(theme, \"tooltip.background\", \"#737373\");\r\n\r\n  let placementPosition = {};\r\n  const beforePosition = {\r\n    content: \"' '\",\r\n    left: \"50%\",\r\n    height: 0,\r\n    width: 0,\r\n    position: \"absolute\",\r\n    pointerEvents: \"none\",\r\n    marginLeft: `calc(${tooltipArrowSize} * -1);`,\r\n  };\r\n\r\n  switch (placement) {\r\n    case \"top\":\r\n      placementPosition = {\r\n        transform: \"translateX(-50%) translateY(-50%)\",\r\n        \"&::before\": {\r\n          ...beforePosition,\r\n          top: \"100%\",\r\n          borderTopColor: background,\r\n        },\r\n      };\r\n      break;\r\n    case \"right\":\r\n      placementPosition = {\r\n        transform: \"translateX(0) translateY(-50%)\",\r\n        \"&::before\": {\r\n          ...beforePosition,\r\n          left: `calc(${tooltipArrowSize} * -1)`,\r\n          top: \"50%\",\r\n          transform: \"translateX(0) translateY(-50%)\",\r\n          borderRightColor: background,\r\n        },\r\n      };\r\n      break;\r\n    case \"left\":\r\n      placementPosition = {\r\n        transform: \"translateX(-100%) translateY(-50%)\",\r\n        \"&::before\": {\r\n          ...beforePosition,\r\n          left: \"auto\",\r\n          right: `calc(${tooltipArrowSize} * -2)`,\r\n          top: \"50%\",\r\n          transform: \"translateX(0) translateY(-50%)\",\r\n          borderLeftColor: background,\r\n        },\r\n      };\r\n      break;\r\n    default:\r\n      placementPosition = {\r\n        transform: \"translateX(-50%)\",\r\n        \"&::before\": {\r\n          ...beforePosition,\r\n          bottom: \"100%\",\r\n          borderBottomColor: background,\r\n        },\r\n      };\r\n  }\r\n\r\n  return {\r\n    position: \"fixed\",\r\n    color: background,\r\n    zIndex: 10001,\r\n    ...placementPosition,\r\n  };\r\n});\r\n\r\nconst BaseHelpTip = styled.div(({ theme }) => ({\r\n  border: `1px solid ${get(theme, \"borderColor\", \"#E2E2E2\")}`,\r\n  borderRadius: 2,\r\n  backgroundColor: get(theme, \"boxBackground\", \"#FBFAFA\"),\r\n  paddingLeft: 10,\r\n  paddingTop: 5,\r\n  paddingBottom: 5,\r\n  paddingRight: 10,\r\n  \"& .leftItems\": {\r\n    fontSize: 16,\r\n    fontWeight: \"bold\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    \"& .min-icon\": {\r\n      marginRight: 5,\r\n      height: 28,\r\n      width: 38,\r\n    },\r\n  },\r\n  \"& .helpText\": {\r\n    fontSize: 10,\r\n    paddingLeft: 5,\r\n    marginTop: 5,\r\n    color: \"black\",\r\n  },\r\n}));\r\n\r\nexport const HelpTip: FC<HelpTipProps> = ({ children, content, placement }) => {\r\n  const [anchorEl, setAnchorEl] = useState<\r\n    (EventTarget & HTMLSpanElement) | null\r\n  >(null);\r\n  const [helptipVisible, setHelptipVisible] = useState<boolean>(false);\r\n  const [helptipOpen, setHelptipOpen] = useState<boolean>(false);\r\n\r\n  const handlePointerLeave = () => {\r\n    helptipOpen\r\n      ? setTimeout(() => {\r\n          setHelptipVisible(false);\r\n          setHelptipOpen(false);\r\n        }, 50000)\r\n      : setTimeout(() => {\r\n          setHelptipVisible(false);\r\n        }, 1000);\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (!helptipOpen) {\r\n      setHelptipVisible(false);\r\n      setHelptipOpen(true);\r\n    }\r\n  };\r\n\r\n  const HelptipElement: FC<HelpTipConstructProps> = ({\r\n    placement,\r\n    content,\r\n    anchorEl,\r\n  }) => {\r\n    let position = {};\r\n    let calculatedPlacement = placement;\r\n    const boundYLimit = 25;\r\n    const boundXLimit = 175;\r\n\r\n    if (anchorEl) {\r\n      const bounds = anchorEl.getBoundingClientRect();\r\n      const windowWidth = document.documentElement.offsetWidth;\r\n      const windowHeight = document.documentElement.offsetHeight;\r\n\r\n      switch (placement) {\r\n        case \"bottom\":\r\n          const calcPosition = bounds.top + bounds.height + boundYLimit;\r\n\r\n          if (calcPosition > windowHeight) {\r\n            calculatedPlacement = \"top\";\r\n          }\r\n          break;\r\n        case \"left\":\r\n          const calcInitPosition = bounds.left - boundXLimit;\r\n\r\n          if (calcInitPosition < 0) {\r\n            calculatedPlacement = \"right\";\r\n          }\r\n\r\n          break;\r\n        case \"right\":\r\n          const calcEndPosition = bounds.left + bounds.width + boundXLimit;\r\n\r\n          if (calcEndPosition > windowWidth) {\r\n            calculatedPlacement = \"left\";\r\n          }\r\n          break;\r\n        case \"top\":\r\n          if (bounds.top < boundYLimit) {\r\n            calculatedPlacement = \"bottom\";\r\n          }\r\n\r\n          break;\r\n      }\r\n\r\n      switch (calculatedPlacement) {\r\n        case \"bottom\":\r\n          position = {\r\n            top: bounds.top + bounds.height + 10,\r\n            left: bounds.left + bounds.width / 2,\r\n          };\r\n          break;\r\n        case \"left\":\r\n          position = {\r\n            top: bounds.top + bounds.height / 2,\r\n            left: bounds.left - 12,\r\n          };\r\n          break;\r\n        case \"right\":\r\n          position = {\r\n            top: bounds.top + bounds.height / 2,\r\n            left: bounds.left + bounds.width + 12,\r\n          };\r\n          break;\r\n        case \"top\":\r\n          position = {\r\n            top: bounds.top - bounds.height / 2 - 10,\r\n            left: bounds.left + bounds.width / 2,\r\n          };\r\n          break;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <HelptipItem\r\n        placement={calculatedPlacement}\r\n        style={position}\r\n        onClick={handleClick}\r\n      >\r\n        {content}\r\n      </HelptipItem>\r\n    );\r\n  };\r\n\r\n  const HelptipTarget: FC<HelpTipConstructProps> = ({\r\n    placement,\r\n    anchorEl,\r\n  }) => {\r\n    let position = {};\r\n    let calculatedPlacement = placement;\r\n    const boundYLimit = 45;\r\n    const boundXLimit = 175;\r\n\r\n    if (anchorEl) {\r\n      const bounds = anchorEl.getBoundingClientRect();\r\n      const windowWidth = document.documentElement.offsetWidth;\r\n      const windowHeight = document.documentElement.offsetHeight;\r\n\r\n      switch (placement) {\r\n        case \"bottom\":\r\n          const calcPosition = bounds.top + bounds.height + boundYLimit;\r\n\r\n          if (calcPosition > windowHeight) {\r\n            calculatedPlacement = \"top\";\r\n          }\r\n          break;\r\n        case \"left\":\r\n          const calcInitPosition = bounds.left - boundXLimit;\r\n\r\n          if (calcInitPosition < 0) {\r\n          }\r\n\r\n          break;\r\n        case \"right\":\r\n          const calcEndPosition = bounds.left + bounds.width + boundXLimit;\r\n\r\n          if (calcEndPosition > windowWidth) {\r\n            calculatedPlacement = \"left\";\r\n          }\r\n          break;\r\n        case \"top\":\r\n          if (bounds.top < boundYLimit) {\r\n            calculatedPlacement = \"bottom\";\r\n          }\r\n\r\n          break;\r\n      }\r\n\r\n      switch (calculatedPlacement) {\r\n        case \"bottom\":\r\n          position = {\r\n            top: bounds.top + bounds.height + 10,\r\n            left: bounds.left + bounds.width / 2,\r\n          };\r\n          break;\r\n        case \"left\":\r\n          position = {\r\n            top: bounds.top + bounds.height / 2,\r\n            left: bounds.left - 12,\r\n          };\r\n          break;\r\n        case \"right\":\r\n          position = {\r\n            top: bounds.top + bounds.height / 2,\r\n            left: bounds.left + bounds.width + 12,\r\n          };\r\n          break;\r\n        case \"top\":\r\n          position = {\r\n            top: bounds.top - bounds.height / 2 - 10,\r\n            left: bounds.left + bounds.width / 2,\r\n          };\r\n          break;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <HelpTargetItem\r\n        placement={calculatedPlacement}\r\n        style={position}\r\n        onClick={handleClick}\r\n      >\r\n        <HelpIconFilled style={{ width: 12, height: 12 }} />\r\n      </HelpTargetItem>\r\n    );\r\n  };\r\n\r\n  function useOutsideAlerter(ref: any) {\r\n    useEffect(() => {\r\n      function handleClickOutside(event: any) {\r\n        if (ref.current && !ref.current.contains(event.target)) {\r\n          setHelptipOpen(false);\r\n        }\r\n      }\r\n\r\n      document.addEventListener(\"mousedown\", handleClickOutside);\r\n      return () => {\r\n        document.removeEventListener(\"mousedown\", handleClickOutside);\r\n      };\r\n    }, [ref]);\r\n  }\r\n  const wrapperRef = useRef(null);\r\n  useOutsideAlerter(wrapperRef);\r\n\r\n  return placement ? (\r\n    <Fragment>\r\n      <HelptipWrapper\r\n        ref={wrapperRef}\r\n        onPointerEnter={(event) => {\r\n          if (!helptipOpen) {\r\n            setAnchorEl(event.currentTarget);\r\n            setHelptipVisible(true);\r\n          }\r\n        }}\r\n        onMouseLeave={handlePointerLeave}\r\n      >\r\n        {children}\r\n        {helptipVisible &&\r\n          !helptipOpen &&\r\n          createPortal(\r\n            <HelptipTarget\r\n              placement={placement}\r\n              content={<HelpIconFilled />}\r\n              anchorEl={anchorEl}\r\n            />,\r\n            document.body,\r\n          )}\r\n        {helptipOpen &&\r\n          createPortal(\r\n            <HelptipElement\r\n              placement={placement}\r\n              content={\r\n                <BaseHelpTip className={\"helpbox-container\"} ref={wrapperRef}>\r\n                  <Grid container>\r\n                    <Grid item xs={12} className={\"helpText\"}>\r\n                      {content}\r\n                    </Grid>\r\n                  </Grid>\r\n                </BaseHelpTip>\r\n              }\r\n              anchorEl={anchorEl}\r\n            />,\r\n            document.body,\r\n          )}\r\n      </HelptipWrapper>\r\n    </Fragment>\r\n  ) : (\r\n    <Fragment>{children}</Fragment>\r\n  );\r\n};\r\n\r\nexport default HelpTip;\r\n","// This file is part of MinIO Design System\r\n// Copyright (c) 2022 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, {\r\n  cloneElement,\r\n  FC,\r\n  Fragment,\r\n  HTMLAttributes,\r\n  useState,\r\n} from \"react\";\r\nimport styled, { css, keyframes } from \"styled-components\";\r\nimport { createPortal } from \"react-dom\";\r\nimport get from \"lodash/get\";\r\nimport {\r\n  TooltipBuild,\r\n  TooltipConstructProps,\r\n  TooltipProps,\r\n} from \"./Tooltip.types\";\r\n\r\nconst opacityAnimation = keyframes`\r\n  from {\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst TooltipWrapper = styled.span<HTMLAttributes<HTMLDivElement>>(\r\n  {\r\n    display: \"inline-flex\",\r\n    position: \"relative\",\r\n  },\r\n  css`\r\n    &:hover {\r\n      & .tooltipElement {\r\n        display: block;\r\n        animation: ${opacityAnimation} 1s;\r\n      }\r\n    }\r\n  `,\r\n);\r\n\r\nconst TooltipItem = styled.div<TooltipBuild>(({ theme, placement }) => {\r\n  const tooltipArrowSize = \"6px\";\r\n\r\n  const background = get(theme, \"tooltip.background\", \"#737373\");\r\n  const textColor = get(theme, \"tooltip.color\", \"#FFFFFF\");\r\n\r\n  let placementPosition = {};\r\n  const beforePosition = {\r\n    content: \"' '\",\r\n    left: \"50%\",\r\n    border: \"solid transparent\",\r\n    height: 0,\r\n    width: 0,\r\n    position: \"absolute\",\r\n    pointerEvents: \"none\",\r\n    borderWidth: tooltipArrowSize,\r\n    marginLeft: `calc(${tooltipArrowSize} * -1);`,\r\n  };\r\n\r\n  switch (placement) {\r\n    case \"top\":\r\n      placementPosition = {\r\n        transform: \"translateX(-50%) translateY(-50%)\",\r\n        \"&::before\": {\r\n          ...beforePosition,\r\n          top: \"100%\",\r\n          borderTopColor: background,\r\n        },\r\n      };\r\n      break;\r\n    case \"right\":\r\n      placementPosition = {\r\n        transform: \"translateX(0) translateY(-50%)\",\r\n        \"&::before\": {\r\n          ...beforePosition,\r\n          left: `calc(${tooltipArrowSize} * -1)`,\r\n          top: \"50%\",\r\n          transform: \"translateX(0) translateY(-50%)\",\r\n          borderRightColor: background,\r\n        },\r\n      };\r\n      break;\r\n    case \"left\":\r\n      placementPosition = {\r\n        transform: \"translateX(-100%) translateY(-50%)\",\r\n        \"&::before\": {\r\n          ...beforePosition,\r\n          left: \"auto\",\r\n          right: `calc(${tooltipArrowSize} * -2)`,\r\n          top: \"50%\",\r\n          transform: \"translateX(0) translateY(-50%)\",\r\n          borderLeftColor: background,\r\n        },\r\n      };\r\n      break;\r\n    default:\r\n      placementPosition = {\r\n        transform: \"translateX(-50%)\",\r\n        \"&::before\": {\r\n          ...beforePosition,\r\n          bottom: \"100%\",\r\n          borderBottomColor: background,\r\n        },\r\n      };\r\n  }\r\n\r\n  return {\r\n    position: \"fixed\",\r\n    borderRadius: 4,\r\n    color: textColor,\r\n    background: background,\r\n    lineHeight: 1,\r\n    zIndex: 10001,\r\n    padding: 8,\r\n    fontSize: 12,\r\n    boxShadow: \"#00000050 0px 3px 10px\",\r\n    maxWidth: 350,\r\n    ...placementPosition,\r\n  };\r\n});\r\n\r\nconst TooltipElement: FC<TooltipConstructProps> = ({\r\n  placement,\r\n  content,\r\n  anchorEl,\r\n}) => {\r\n  let position = {};\r\n  let calculatedPlacement = placement;\r\n  const boundYLimit = 45;\r\n  const boundXLimit = 175;\r\n\r\n  if (anchorEl) {\r\n    const bounds = anchorEl.getBoundingClientRect();\r\n    const windowWidth = document.documentElement.offsetWidth;\r\n    const windowHeight = document.documentElement.offsetHeight;\r\n\r\n    switch (placement) {\r\n      case \"bottom\":\r\n        const calcPosition = bounds.top + bounds.height + boundYLimit;\r\n\r\n        if (calcPosition > windowHeight) {\r\n          calculatedPlacement = \"top\";\r\n        }\r\n        break;\r\n      case \"left\":\r\n        const calcInitPosition = bounds.left - boundXLimit;\r\n\r\n        if (calcInitPosition < 0) {\r\n          calculatedPlacement = \"right\";\r\n        }\r\n\r\n        break;\r\n      case \"right\":\r\n        const calcEndPosition = bounds.left + bounds.width + boundXLimit;\r\n\r\n        if (calcEndPosition > windowWidth) {\r\n          calculatedPlacement = \"left\";\r\n        }\r\n        break;\r\n      case \"top\":\r\n        if (bounds.top < boundYLimit) {\r\n          calculatedPlacement = \"bottom\";\r\n        }\r\n\r\n        break;\r\n    }\r\n\r\n    switch (calculatedPlacement) {\r\n      case \"bottom\":\r\n        position = {\r\n          top: bounds.top + bounds.height + 10,\r\n          left: bounds.left + bounds.width / 2,\r\n        };\r\n        break;\r\n      case \"left\":\r\n        position = {\r\n          top: bounds.top + bounds.height / 2,\r\n          left: bounds.left - 12,\r\n        };\r\n        break;\r\n      case \"right\":\r\n        position = {\r\n          top: bounds.top + bounds.height / 2,\r\n          left: bounds.left + bounds.width + 12,\r\n        };\r\n        break;\r\n      case \"top\":\r\n        position = {\r\n          top: bounds.top - bounds.height / 2 - 10,\r\n          left: bounds.left + bounds.width / 2,\r\n        };\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <TooltipItem placement={calculatedPlacement} style={position}>\r\n      {content}\r\n    </TooltipItem>\r\n  );\r\n};\r\n\r\nconst Tooltip: FC<TooltipProps> = ({\r\n  children,\r\n  tooltip,\r\n  errorProps,\r\n  placement = \"bottom\",\r\n}) => {\r\n  const [anchorEl, setAnchorEl] = useState<\r\n    (EventTarget & HTMLSpanElement) | null\r\n  >(null);\r\n  const [tooltipVisible, setTooltipVisible] = useState<boolean>(false);\r\n\r\n  if (tooltip === \"\") {\r\n    return (\r\n      <Fragment>\r\n        {errorProps ? cloneElement(children, { ...errorProps }) : children}\r\n      </Fragment>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <TooltipWrapper\r\n        onPointerEnter={(event) => {\r\n          setAnchorEl(event.currentTarget);\r\n          setTooltipVisible(true);\r\n        }}\r\n        onPointerLeave={() => {\r\n          setTooltipVisible(false);\r\n        }}\r\n      >\r\n        {errorProps ? cloneElement(children, { ...errorProps }) : children}\r\n        {tooltipVisible &&\r\n          createPortal(\r\n            <TooltipElement\r\n              placement={placement}\r\n              content={tooltip}\r\n              anchorEl={anchorEl}\r\n            />,\r\n            document.body,\r\n          )}\r\n      </TooltipWrapper>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Tooltip;\r\n"],"names":[],"sourceRoot":""}