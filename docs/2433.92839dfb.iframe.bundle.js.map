{"version":3,"file":"2433.92839dfb.iframe.bundle.js","mappings":";;;;;;;;;;;;;;AAuFA;;AAEA;;;AAGA;AACA;AACA;AAQA","sources":["webpack://mds/./src/components/ProgressBar/ProgressBar.tsx"],"sourcesContent":["// This file is part of MinIO Design System\r\n// Copyright (c) 2023 MinIO, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport React, { FC } from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport get from \"lodash/get\";\r\nimport { CommonProgressBar, ProgressBarProps } from \"./ProgressBar.types\";\r\nimport { lightColors } from \"../../global/themes\";\r\nimport Box from \"../Box/Box\";\r\n\r\nconst colorItems = {\r\n  blue: \"main\",\r\n  red: \"danger\",\r\n  green: \"good\",\r\n  orange: \"warning\",\r\n  grey: \"disabled\",\r\n};\r\n\r\nconst ProgressBase = styled.div<CommonProgressBar>(\r\n  ({ theme, sx, color, barHeight, transparentBG }) => ({\r\n    \"& .progBlock\": {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      gap: 10,\r\n    },\r\n    \"& .progressContainer\": {\r\n      position: \"relative\",\r\n      width: \"100%\",\r\n      height: barHeight,\r\n      backgroundColor: transparentBG\r\n        ? \"transparent\"\r\n        : get(theme, \"boxBackground\", lightColors.boxBackground),\r\n      borderRadius: barHeight,\r\n      overflow: \"hidden\",\r\n    },\r\n    \"& .notificationLabel\": {\r\n      fontSize: 12,\r\n      color: get(\r\n        theme,\r\n        `signalColors.${colorItems[color || \"blue\"]}`,\r\n        lightColors.mainBlue,\r\n      ),\r\n    },\r\n    \"& .percentageBar\": {\r\n      display: \"block\",\r\n      height: barHeight,\r\n      backgroundColor: get(\r\n        theme,\r\n        `signalColors.${colorItems[color || \"blue\"]}`,\r\n        lightColors.mainBlue,\r\n      ),\r\n      transitionDuration: \"0.1s\",\r\n      borderRadius: barHeight,\r\n    },\r\n    ...sx,\r\n  }),\r\n);\r\n\r\nexport const innerAnimation = keyframes`0% {\r\n                                          left: -100px;\r\n                                          visibility: visible;\r\n                                          width: 100px;\r\n                                        }\r\n                                          60% {\r\n                                            width: 300px\r\n                                          }\r\n                                          99% {\r\n                                            left: calc(100% + 300px);\r\n                                          }\r\n                                          100% {\r\n                                            visibility: hidden;\r\n                                            width: 100px;\r\n                                          }`;\r\n\r\nconst IndeterminateItem = styled.div<CommonProgressBar>`\r\n  width: 100px;\r\n  height: ${(props) => get(props, \"barHeight\", 8)}px;\r\n  display: block;\r\n  position: absolute;\r\n  border-radius: ${(props) => get(props, \"barHeight\", 8)}px;\r\n  animation: ${innerAnimation} 1000ms linear infinite normal forwards;\r\n  background-color: ${(props) =>\r\n    get(\r\n      props.theme,\r\n      `signalColors.${colorItems[props.color || \"blue\"]}`,\r\n      lightColors.mainBlue,\r\n    )};\r\n`;\r\n\r\nconst ProgressBar: FC<ProgressBarProps> = ({\r\n  progressLabel = false,\r\n  sx,\r\n  value = 0,\r\n  maxValue = 100,\r\n  variant = \"indeterminate\",\r\n  notificationLabel = \"\",\r\n  color = \"blue\",\r\n  barHeight = 6,\r\n  transparentBG = false,\r\n}) => {\r\n  const calcPerc = (value * 100) / maxValue;\r\n\r\n  return (\r\n    <ProgressBase\r\n      color={color}\r\n      sx={sx}\r\n      barHeight={barHeight}\r\n      transparentBG={transparentBG}\r\n    >\r\n      <Box className={\"progBlock\"}>\r\n        <Box className={\"progressContainer\"}>\r\n          {variant === \"indeterminate\" ? (\r\n            <IndeterminateItem color={color} barHeight={barHeight} />\r\n          ) : (\r\n            <Box\r\n              className={\"percentageBar\"}\r\n              style={{ width: `${calcPerc}%` }}\r\n            />\r\n          )}\r\n        </Box>\r\n        {progressLabel && variant !== \"indeterminate\" && (\r\n          <span className={\"progressPercentage\"}>{Math.floor(calcPerc)}%</span>\r\n        )}\r\n      </Box>\r\n      {notificationLabel !== \"\" && (\r\n        <span className={\"notificationLabel\"}>{notificationLabel}</span>\r\n      )}\r\n    </ProgressBase>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n"],"names":[],"sourceRoot":""}